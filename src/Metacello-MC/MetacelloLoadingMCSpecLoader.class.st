Class {
	#name : 'MetacelloLoadingMCSpecLoader',
	#superclass : 'MetacelloCommonMCSpecLoader',
	#category : 'Metacello-MC-Loaders',
	#package : 'Metacello-MC',
	#tag : 'Loaders'
}

{ #category : 'accessing' }
MetacelloLoadingMCSpecLoader >> actionLabel [

	^'Loading '
]

{ #category : 'actions' }
MetacelloLoadingMCSpecLoader >> doLoad [
	"NOOP"
]

{ #category : 'accessing' }
MetacelloLoadingMCSpecLoader >> fetchingSpecLoader [

	^(MetacelloFetchingMCSpecLoader on: self spec)
		loaderPolicy: self loaderPolicy copy;
		yourself
]

{ #category : 'packages' }
MetacelloLoadingMCSpecLoader >> latestPackage: aString fromRepository: repositorySpecs [

	| gofer |
	gofer := MetacelloGofer new.
	gofer disablePackageCache.
	(self repositoriesFrom: repositorySpecs) do: [:repo | gofer repository: repo ].
	^([(GoferPackageReference name: aString) resolveWith: gofer]
		on: Error
		do: [:ignored | ^ nil ]) name
]

{ #category : 'private' }
MetacelloLoadingMCSpecLoader >> linearLoadPackageSpec: packageSpec gofer: gofer [
	MetacelloPlatform current
		do: [ | loadBlock goferLoad answers resolvedReference repo |
			resolvedReference := self
				resolvePackageSpec: packageSpec
				gofer: gofer.
			resolvedReference
				ifNil: [ "Package version already loaded into image" ^ self ].
			loadBlock := [ self preLoad: packageSpec.
			goferLoad := MetacelloGoferLoad on: MetacelloGofer new.
			goferLoad addResolved: resolvedReference.
			goferLoad execute.
			self clearCurrentVersionCache.
			self postLoad: packageSpec ].
			(answers := packageSpec answers) notEmpty
				ifTrue: [ loadBlock valueSupplyingMetacelloAnswers: answers ]
				ifFalse: [ loadBlock value ].
			repo := resolvedReference repository.
			self hasRepositoryOverrides
				ifTrue: [ repo := self loaderPolicy repositoryMap
						at: resolvedReference name
						ifAbsent: [ resolvedReference repository ].
					resolvedReference workingCopy repositoryGroup addRepository: repo ]
				ifFalse: [ resolvedReference workingCopy repositoryGroup
						addRepository: resolvedReference repository ].
			MetacelloNotification signal:
					'Loaded -> ' , resolvedReference name , ' --- '
						, repo repositoryDescription , ' --- '
						, resolvedReference repository description ]
		displaying: 'Loading ' , packageSpec file
]

{ #category : 'doits' }
MetacelloLoadingMCSpecLoader >> postLoad: packageOrVersionSpec [

	| block |
	(block := packageOrVersionSpec postLoadDoItBlock) ~~ nil
		ifTrue: [ block valueWithPossibleArgs: { self. packageOrVersionSpec. } ]
]

{ #category : 'doits' }
MetacelloLoadingMCSpecLoader >> preLoad: packageOrVersionSpec [

	| block |
	(block := packageOrVersionSpec preLoadDoItBlock) ~~ nil
		ifTrue: [ block valueWithPossibleArgs: { self. packageOrVersionSpec. } ]
]

{ #category : 'development support' }
MetacelloLoadingMCSpecLoader >> repositoryFor: pkgSpec with: gofer [

	^([self resolveSpec: pkgSpec with: gofer]
		on: Error
		do: [:ignored | ^nil ]) repository
]

{ #category : 'development support' }
MetacelloLoadingMCSpecLoader >> resolveSpec: pkgSpec with: gofer [

	^pkgSpec goferLoaderReference resolveWith: gofer
]
